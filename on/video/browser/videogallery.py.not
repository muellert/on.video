# gallery view for folders containing videos

# (c) 2012 oeko.net
# c/o toni mueller <support@oeko.net>
# license: GPLv3

"""
Folder view that enables the display of videos like in a photo
gallery.

These are the differences to the normal gallery view of folders:

 * Videos are displayed using their summary view. May be
   generalized later.

 * Contained folders are searched for sub-galleries, and a
   thumbnail and description about the collection is being
   displayed.

 * Next-Previous navigation is generally enabled.

 * If possible, creating sub-folders should inherit this gallery
   view from their parent folder, so that contained folders are
   automatically also galleries by default.


Open question: How to revert the display settings for folders
on uninstallation of the product?

"""


from five import grok
from zope import schema
from plone.directives import form
from plone.namedfile.field import NamedBlobImage
from plone.memoize.instance import memoize

from on.video import _

"""
class IVideoFolder(form.Schema):
    "x"x"What makes a folder a video gallery?"x"x"

    bannerimage = NamedBlobImage(
        title=_(u"Banner image"),
        description=_(u"An image used to represent this folder in the containing folder's gallery view."),
        required=False,
        missing_value=u'',
        )

    description = schema.Text(
        title=_(u'Description'),
        description=_(u'A short intro to this video gallery.'),
        required=False,
        missing_value=u'(no description)',
        )
"""


"""
>>> fl = x.folderlistingFolderContents()
>>> fl
[<Item at /01/mnt/Plone/x/somemovie>, <Item at /01/mnt/Plone/x/movie2>, <ATFolder at /01/mnt/Plone/x/blubb>, <Item at /01/mnt/Plone/x/video-in-folder>, <Item at /01/mnt/Plone/x/anothervideo>]
>>> fl[2].getTypeInfo().title
'Folder'
>>> fl[1].getTypeInfo().title
'Video'
>>>

"""


class View(grok.View):
    """Default view, gallery style, for a video folder.
    """
    
    grok.context(IVideoFolder)
    grok.require('zope2.View')
    #grok.name('view') - redundant

    @memoize
    def update(self):
        """Called before rendering the template for this view
        """
        self.fl = [ (item, item.portal_type) if item.portal_type in \
                    ('Folder', 'on.video.Video') for item in self.context.folderlistingFolderContents() ]

    @memoize
    def videoListing(self):
        """Get all child videos and video folders in this folder.
        """
        folder = self.context
        items = folder.keys()
